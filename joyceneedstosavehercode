import { FALSE, TRUE } from 'node-sass';
import React, { Component} from 'react';
import { Dropdown, Button, Accordion, Header, Grid, Checkbox, Icon} from 'semantic-ui-react';

// Description:Allows players to trade animals and data points
// Parent: PlanetPlayerGameScreen
// Children: None
// Props Used:

class DataSelect extends Component{
    constructor(props) {
        super(props);
        this.state = {
            planet: null,
            planetList: [],
            region: null,
            regionList: [],
            data: null,
            dataType: null,
            displayOptions: [],

            allRegions: [],
            allPlanets: [],
            planetRegionDict: {},
            availablePlanetRegion: {},

            activeIndex: {},
        };

        //new: building a dictionary
        let buildingDict = {}
        this.props.firestore.collection("lgames")
        .doc(this.props.gameCode)
        .collection("players")
        .doc(this.props.playerId)
        .collection("sensors")
        .get()
        .then((querySnapshot) => {
            querySnapshot.forEach((doc) => {
                let planet = doc.data().planet;
                let region = doc.data().region;
                if (!buildingDict.includes(planet)) {
                    buildingDict.push({planet: [region]});
                } else if (!buildingDict[planet].includes(region)){
                    buildingDict[planet].push(region)
                }
            })

        }).then(() => {
            this.setState({
                planetRegionDict: buildingDict
            });
        });

        //new: building an all avaiable planet region dictionary
        let buildingDict2 = {}
        this.props.firestore.collection("lgames")
        .doc(this.props.gameCode)
        .collection("planets")
        .get()
        .then((querySnapshot) => {
            querySnapshot.forEach((doc) => {
                let planet = doc.data().planet;
                let region = doc.data().region;
                if (!buildingDict.includes(planet)) {
                    buildingDict.push({planet: [region]});
                } else if (!buildingDict[planet].includes(region)){
                    buildingDict[planet].push(region)
                }
            })

        }).then(() => {
            this.setState({
                planetRegionDict: buildingDict
            });
        });


        
        // finds avaliable locations based on player and game from firebase, old
        let availablePlanets = [];
        this.props.firestore.collection("lgames")
        .doc(this.props.gameCode)
        .collection("players")
        .doc(this.props.playerId)
        .collection("sensors")
        .get()
        .then((querySnapshot) => {
            querySnapshot.forEach((doc) => {
                let planet = doc.data().planet;
                if (!availablePlanets.includes(planet)) {
                    availablePlanets.push(planet);
                }
            })
        }).then(() => {
            this.setState({
                planetList: availablePlanets
            });
        });

         //finds the avaiable regions based on player and game from firebase
         let allPlanets = [];
         this.props.firestore.collection("lgames")
         .doc(this.props.gameCode)
         .collection("planets")
         .get()
         .then((querySnapshot) => {
             querySnapshot.forEach((doc) => {
                 let planet = doc.data().name;
                 if (!allPlanets.includes(planet)) {
                     allPlanets.push(planet);
                 }
             })
         }).then(() => {
             this.setState({
                 allPlanets: allPlanets
             });
         });
    }

        //finds the avaiable regions based on player and game from firebase
        // let availableRegions = [];
        // this.props.firestore.collection("lgames")
        // .doc(this.props.gameCode)
        // .collection("players")
        // .doc(this.props.playerId)
        // .collection("sensors")
        // .get()
        // .then((querySnapshot) => {
        //     querySnapshot.forEach((doc) => {
        //         let planet = doc.data().planet;
        //         if (!availablePlanets.includes(planet)) {
        //             availablePlanets.push(planet);
        //         }
        //     })
        // }).then(() => {
        //     this.setState({
        //         planetList: availablePlanets
        //     });
        // });

     //checks to see if planet button should be active
    activePlanet = (planet) => {
        if (this.state.planet === planet) {
            return true;
        }
        return false;
    }

    //checks to see if region button should be active
    activeRegion = (region) => {
        if (this.state.region === region) {
            return true;
        }
        return false;
    }

    handleClick = (e, titleProps) => {
        const { index } = titleProps
        const { activeIndex } = this.state

        if (!this.state.activeIndex.includes(index)){
            this.setState({
                index: TRUE,
            })
        } else {
            this.setState({
                index: !this.state.activeIndex.index
            })
        }

        const newIndex = activeIndex === index ? -1 : index
        if (this.state.activeIndex.includes(index)){
            this.state.activeIndex = this
        }
    
        this.setState({ activeIndex: newIndex })
    }


    render(){
        return(
            <div style={{"margin": "10px"}}>
            {/* {this.state.planetRegionDict.map((planet) => (

            ))} */}

        {this.state.allPlanets.map((planet) => (
            <Accordion>
                <Accordion.Title
                active={this.state.activeIndex[planet] || FALSE} //based on what is selected
                index={planet}
                onClick={this.handleClick}
                >
                    <Checkbox label= {"hi"} />
                    {planet}
                    <Icon name='dropdown' />
                </Accordion.Title>
                <Accordion.Content active={this.state.activeIndex.includes(planet)}>
                <Grid columns={3}>
                    <Grid.Column  style={{"padding": "8px"}}><Button>Region1</Button></Grid.Column>
                    <Grid.Column  style={{"padding": "8px"}}><Button>Region2</Button></Grid.Column>
                    <Grid.Column  style={{"padding": "8px"}}><Button>Region3</Button></Grid.Column>
                {/* {this.state.planetList.map((planet) => (
                // <Grid.Column style={{"padding": "8px"}}>
                //     <Button
                //         size="medium"
                //         content={planet}
                //         onClick={this.planet}
                //         fluid
                //         active={this.activeRegion(planet)}
                //     />
                // </Grid.Column>
                ))} */}
                </Grid>
            </Accordion.Content>
        </Accordion>
        ))}

            <Header size='medium'>Select Planet</Header>
            {/* planet buttons in columns of 3 */}
            <Grid columns={1}>
                {this.state.allPlanets.map((planet) => (
                //if available planets includes planet in all planets
                this.state.planetList.includes(planet) ?
                    <Grid.Column style={{"padding": "8px"}}>
                        {/* <Button
                            size="small"
                            content={planet}
                            onClick={this.selectPlanet}
                            fluid
                            active={this.activePlanet(planet)}
                        /> */}
                        <Checkbox label= {planet} />
                    </Grid.Column> :
                    //if not, then button will be disabled
                    <Grid.Column style={{"padding": "8px"}}>
                        <Checkbox label= {planet} disable />
                    </Grid.Column>
                ))}
                
            </Grid>

            <Header size='medium'>Select Region</Header>
            {/* Regions in columns of 3 */}
            {/* <Grid columns={3}>
                {this.state.regionsList.map((region) => (
                <Grid.Column style={{"padding": "8px"}}>
                    <Button
                        size="medium"
                        content={region}
                        onClick={this.selectRegion}
                        fluid
                        active={this.activeRegion(region)}
                    />
                </Grid.Column>
                ))}
            </Grid> */}
            
            <Header size='medium'>Select Sensor</Header>
            {/* data avaliable displayed as a lsit of buttons */}
            {/* <div>
                {this.state.displayOptions.map((data) => (
                    <Button style={{"margin-bottom": "5px"}}
                        size="medium"
                        content={data.text}
                        onClick={this.chooseData}
                        fluid
                        value={data.value}
                    />
                ))}
            </div> */}

        </div>
        )
    }
}

export default DataSelect;

//regions and data

    // // finds available regions based on planet selected
    // selectPlanet = (e, data) => {
    //     let availableRegions = new Set();

    //     this.props.firestore.collection("lgames")
    //     .doc(this.props.gameCode)
    //     .collection("players")
    //     .doc(this.props.playerId)
    //     .collection("sensors")
    //     .where("planet", "==", data.content)
    //     .get()
    //     .then((querySnapshot) => {
    //         querySnapshot.forEach((doc) => {
    //             availableRegions.add(doc.data().region);
    //         })
    //     }).then(() => {
    //         this.setState({
    //             planet: data.content,  // planet has been selected
    //             regionsList: Array.from(availableRegions).sort(function(a, b) {return a - b;})  // regions available updated
    //         });
    //     });
    // }

    // // finds availbe data based on planet and region selected
    // selectRegion = (e, data) => {
    //     let availableOptions= []
    //     let availableData = [];
    //     let i = 0;
    //     this.props.firestore.collection("lgames")
    //     .doc(this.props.gameCode)
    //     .collection("players")
    //     .doc(this.props.playerId)
    //     .collection("sensors")
    //     .where("planet", "==", this.state.planet)
    //     .where("region", "==", data.content)
    //     .get()
    //     .then((querySnapshot) => {
    //         querySnapshot.forEach((doc) => {
    //             availableOptions.push({text: `${doc.data().dataType} ${i+1}`, value: i});
    //             availableData.push([doc.data().dataType, doc.data().data]);
    //             i += 1;
    //         })
    //     }).then(() => {
    //         this.setState({
    //             region: data.content,  // region has been selected
    //             displayOptions: availableOptions,  // data for button display
    //             dataList: availableData  // numerical sensor data
    //         });
    //     });
    // }